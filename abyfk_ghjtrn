
import pygame as pg
import pymunk.pygame_util
pymunk.pygame_util.positive_y_is_up = False
RES = W,H = 600,600
FPS = 70
pg.init()
surface = pg.display.set_mode(RES)
clock = pg.time.Clock()
draw_options = pymunk.pygame_util.DrawOptions(surface)
spase = pymunk.Space()
spase.gravity = 0,8000
segment_shape = pymunk.Segment(spase.static_body,(1,H),(W,H),30)
spase.add(segment_shape)
segment_shape.elasticity = 0.5
segment_shape.friction = 1.0
def create_square(spase,pos):
    square_mass, square_size = 1,(50,50)
    square_moment = pymunk.moment_for_box(square_mass,square_size)
    square_body = pymunk.Body(square_mass,square_moment)
    square_body.position = pos
    square_shape = pymunk.Poly.create_box(square_body,square_size)
    square_shape.elasticity = 0.1
    square_shape.friction = 1
    spase.add(square_body,square_shape)
while True:
    surface.fill(pg.Color("Grey"))
    for i in pg.event.get(): 
        if i.type == pg.QUIT:
            exit()
        if i.type == pg.MOUSEBUTTONDOWN:
            if i.button == 1:
                create_square(spase,i.pos)
                print(i.pos)
    spase.step(1/FPS)
    spase.debug_draw(draw_options)

    pg.display.flip()
    clock.tick(FPS)
from pygame import*
import random


akno = display.set_mode((500,500))
clock=time.Clock()

game = True

class Vova (sprite.Sprite):
    def __init__(self, kr, x, y):
        super().__init__()
        self.image = transform.scale(image.load(kr), (50,50))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
    def ris(self):
        akno.blit(self.image, (self.rect.x,self.rect.y))


saintgr = Vova("4-1619264770.png", 250,300)
plath = Vova("3-1619264754.jpg", 250,450)
plath2 = Vova("3-1619264754.jpg", 250,0)
dx = 5
dy = 5



while game:
    saintgr.rect.x += dx
    saintgr.rect.y -= dy
    if saintgr.rect.x > 450:
        dx *= -1
    if saintgr.rect.x < 0:
        dx *= -1

                
    if sprite.collide_rect(saintgr, plath):
        dy *= -1
    if sprite.collide_rect(saintgr, plath2):
        dy *= -1


    for i in event.get():
        if i.type == QUIT:
            game = False
    press = key.get_pressed()
    if press[K_LEFT]:
        plath.rect.x -= 5
    if press[K_RIGHT]:
        plath.rect.x += 5
    if press[K_d]:
        plath2.rect.x -= 5
    if press[K_a]:
        plath2.rect.x += 5
    akno.fill((1,1,1))
    plath.ris()
    plath2.ris()
    



    saintgr.ris()
    display.update()
    clock.tick(60)



    
from pygame import*
import random


akno = display.set_mode((500,500))
clock=time.Clock()

game = True

class Vova (sprite.Sprite):
    def __init__(self, kr, x, y):
        super().__init__()
        self.image = transform.scale(image.load(kr), (50,50))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
    def ris(self):
        akno.blit(self.image, (self.rect.x,self.rect.y))

class Vova3 (sprite.Sprite):
    def __init__(self, kr, x, y):
        super().__init__()
        self.image = transform.scale(image.load(kr), (150,50))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
    def ris(self):
        akno.blit(self.image, (self.rect.x,self.rect.y))

#Vova1 = Vova("pdtplf cvthnb bp p.d.jpg",50,50)         


vrage = sprite.Group()
x1 = 20
y1 = 20
for i in range(5):
    y1 = i*55
    for j in range(9):
        x1 = j*55
        monstor = Vova("pdtplf cvthnb bp p.d.jpg", x1, y1)
        vrage.add(monstor)







plath = Vova3("naginata.jpg", 250,450)
saintgr = Vova("granata.png", 250,300)


dx = 5
dy = 5



while game:
    saintgr.rect.x += dx
    saintgr.rect.y -= dy
    if saintgr.rect.x > 450:
        dx *= -1
    if saintgr.rect.x < 0:
        dx *= -1
    if saintgr.rect.y <0:
        dy *= -1
                
    if sprite.collide_rect(saintgr, plath):
        dy *= -1





    for i in event.get():
        if i.type == QUIT:
            game = False
    press = key.get_pressed()
    if press[K_LEFT]:
        plath.rect.x -= 5
    if press[K_RIGHT]:
        plath.rect.x += 5
    akno.fill((1,1,1))
    plath.ris()
    
    for i in vrage:
        i.ris()
        if sprite.collide_rect(i, saintgr):
            dx *= -1
            dy *= -1
            vrage.remove(i)



    if len(vrage) == 0:
        game = False
    if saintgr.rect.y >450:
        game = False



    saintgr.ris()
    display.update()
    clock.tick(60)
